(() => {
  const e = /([\w-]+)|['"]{1}([^'"]*)['"]{1}/g,
    t = /<(?:"[^"]*"['"]*|'[^']*'['"]*|[^'">])+>/g,
    r = new Set(["br", "col", "hr", "img", "input", "link", "meta"]),
    o = (e, t, r, o) => {
      const n = e.slice(t, e.indexOf("<", t)).split("Þ");
      n[0].trim().length > 0 && r.appendChild(document.createTextNode(n[0]));
      for (let e = 1, t = n.length; e < t; ++e) {
        const t = document.createTextNode("Þ");
        r.appendChild(t), o.push(t), n[e].trim().length > 0 && r.appendChild(document.createTextNode(n[e]))
      }
    },
    n = (e, t) => {
      if (t && 11 == t.nodeType) e.e.parentNode.replaceChild(t, e.e);
      else if (Array.isArray(t)) {
        const {
          t: r
        } = e, {
          childNodes: o
        } = r;
        for (let e = j = 0; e < o.length && j < t.length;) {
          const n = o[e].uuid;
          n ? n == t[j].uuid ? (e++, j++) : t.some(e => e.uuid == n) ? r.insertBefore(t[j++], r.childNodes[e++]) : r.removeChild(r.childNodes[e]) : e++
        }
        for (; j < t.length;) r.appendChild(t[j++])
      } else e.e.nodeValue = t
    },
    s = {
      $component: () => {
        let s, c;
        return (l, ...m) => {
          if (!s) {
            const {
              r: _,
              o: d
            } = (n => {
              let s = -1;
              const c = [],
                l = [];
              n.replace(t, (t, m) => {
                const _ = "/" !== t[1],
                  d = m + t.length,
                  f = n[d];
                let u;
                if (_) {
                  let m;
                  s++, ({
                    name: m,
                    voidElement: u
                  } = (t => {
                    let o, n = 0;
                    const s = {
                      name: "",
                      voidElement: !1,
                      attrs: {}
                    };
                    return t.replace(e, e => {
                      n % 2 ? o = e : 0 === n ? ((r.has(e) || "/" === t[t.length - 2]) && (s.voidElement = !0), s.name = e) : s.attrs[o] = e.replace(/['"]/g, ""), ++n
                    }), s
                  })(t));
                  const _ = document.createElement(m),
                    i = c[s - 1];
                  !u && f && "<" !== f && o(n, d, _, l), i && i.append(_), c[s] = _
                }
                _ && !u || (s--, "<" !== f && f && o(n, d, c[s], l))
              });
              const m = document.createDocumentFragment();
              return m.appendChild(c[0]), {
                r: m,
                o: l.map(e => ({
                  e: e,
                  t: e.parentNode
                }))
              }
            })(l.join("Þ").trim());
            for (let e = 0, t = d.length; e < t; ++e) {
              const t = m[e];
              if (Array.isArray(t)) {
                d[e].e.nodeValue = "";
                const r = document.createDocumentFragment();
                for (let e = 0, o = t.length; e < o;) r.appendChild(t[e++]);
                d[e].t.appendChild(r)
              } else n(d[e], t)
            }
            return _.uuid = "_" + Math.random().toString(36).substr(2, 9), _.firstChild.uuid = _.uuid, s = d, c = m, _
          }
          for (let e = 0, t = m.length; e < t; ++e) {
            const t = m[e];
            c[e] != t && (n(s[e], t), c[e] = t)
          }
        }
      }
    };
  window.StaticJs = s, module && (module.exports = s)
})();