(() => {
  const e = /([\w-]+)|['"]{1}([^'"]*)['"]{1}/g,
    t = /<(?:"[^"]*"['"]*|'[^']*'['"]*|[^'">])+>/g,
    r = ["br", "col", "hr", "img", "input", "link", "meta"],
    s = (e, t, r, s, o = e.slice(t, e.indexOf("<", t)), n = o.split("Þ")) => {
      n[0].trim().length > 0 && r.appendChild(document.createTextNode(n[0]));
      for (let e = 1, t = n.length; e < t; ++e) {
        const t = document.createTextNode("Þ");
        r.appendChild(t), s.push(t), n[e].trim().length > 0 && r.appendChild(document.createTextNode(n[e]))
      }
    },
    o = (e, t) => {
      if (t && 11 == t.nodeType) e.e.parentNode.replaceChild(t, e.e);
      else if (Array.isArray(t)) {
        const {
          t: r
        } = e, {
          childNodes: s
        } = r;
        for (let e = j = 0; e < s.length && j < t.length;) {
          const o = s[e].r;
          o ? o == t[j].r ? (e++, j++) : t.some(e => e.r == o) ? r.insertBefore(t[j++], s[e++]) : r.removeChild(s[e]) : e++
        }
        for (; j < t.length;) r.appendChild(t[j++])
      } else e.e.nodeValue = t
    };
  StaticJS = (() => {
    let n, _;
    return (c, ...l) => {
      if (!n) {
        const {
          s: a,
          o: f
        } = ((o, n = -1, _ = [], c = []) => {
          o.replace(t, (t, l) => {
            const a = "/" !== t[1],
              f = l + t.length,
              i = o[f];
            let m;
            if (a) {
              let l;
              n++, ({
                n: l,
                _: m
              } = ((t, s = 0, o, n = {
                n: "",
                _: !1,
                c: {}
              }) => (t.replace(e, e => {
                s % 2 ? o = e : 0 === s ? ((r.includes(e) || "/" === t[t.length - 2]) && (n._ = !0), n.n = e) : n.c[o] = e.replace(/['"]/g, ""), ++s
              }), n))(t));
              const a = document.createElement(l),
                d = _[n - 1];
              !m && i && "<" !== i && s(o, f, a, c), d && d.append(a), _[n] = a
            }
            a && !m || (n--, "<" !== i && i && s(o, f, _[n], c))
          });
          const l = document.createDocumentFragment();
          return l.appendChild(_[0]), {
            s: l,
            o: c.map(e => ({
              e: e,
              t: e.parentNode
            }))
          }
        })(c.join("Þ").trim());
        for (let e = 0, t = f.length; e < t; ++e) {
          const t = l[e];
          if (Array.isArray(t)) {
            f[e].e.nodeValue = "";
            const r = document.createDocumentFragment();
            for (let e = 0, s = t.length; e < s;) r.appendChild(t[e++]);
            f[e].t.appendChild(r)
          } else o(f[e], t)
        }
        return a.firstChild.r = a.r = Date.now() + Math.random(), n = f, _ = l, a
      }
      for (let e = 0, t = l.length; e < t; ++e) {
        const t = l[e];
        _[e] != t && (o(n[e], t), _[e] = t)
      }
    }
  })
})();