(() => {
  const e = /([\w-]+)|['"]{1}([^'"]*)['"]{1}/g,
    t = /<(?:"[^"]*"['"]*|'[^']*'['"]*|[^'">])+>/g,
    r = new Set(["br", "col", "hr", "img", "input", "link", "meta"]),
    n = (e, t, r, n) => {
      const o = e.slice(t, e.indexOf("<", t)).split("Þ");
      o[0].trim().length > 0 && r.appendChild(document.createTextNode(o[0]));
      for (let e = 1, t = o.length; e < t; ++e) {
        const t = document.createTextNode("Þ");
        r.appendChild(t), n.push(t), o[e].trim().length > 0 && r.appendChild(document.createTextNode(o[e]))
      }
    },
    o = (e, t) => {
      if (t && 11 == t.nodeType) e.e.parentNode.replaceChild(t, e.e);
      else if (Array.isArray(t)) {
        const {
          t: r
        } = e, {
          childNodes: n
        } = r;
        for (let e = j = 0; e < n.length && j < t.length;) {
          const o = n[e].uuid;
          o ? o == t[j].uuid ? (e++, j++) : t.some(e => e.uuid == o) ? r.insertBefore(t[j++], r.childNodes[e++]) : r.removeChild(r.childNodes[e]) : e++
        }
        for (; j < t.length;) r.appendChild(t[j++])
      } else e.e.nodeValue = t
    };
  window.StaticJS = (() => {
    let s, c;
    return (l, ..._) => {
      if (!s) {
        const {
          r: f,
          n: d
        } = (o => {
          let s = -1;
          const c = [],
            l = [];
          o.replace(t, (t, _) => {
            const f = "/" !== t[1],
              d = _ + t.length,
              i = o[d];
            let m;
            if (f) {
              let _;
              s++, ({
                name: _,
                voidElement: m
              } = (t => {
                let n, o = 0;
                const s = {
                  name: "",
                  voidElement: !1,
                  attrs: {}
                };
                return t.replace(e, e => {
                  o % 2 ? n = e : 0 === o ? ((r.has(e) || "/" === t[t.length - 2]) && (s.voidElement = !0), s.name = e) : s.attrs[n] = e.replace(/['"]/g, ""), ++o
                }), s
              })(t));
              const f = document.createElement(_),
                a = c[s - 1];
              !m && i && "<" !== i && n(o, d, f, l), a && a.append(f), c[s] = f
            }
            f && !m || (s--, "<" !== i && i && n(o, d, c[s], l))
          });
          const _ = document.createDocumentFragment();
          return _.appendChild(c[0]), {
            r: _,
            n: l.map(e => ({
              e: e,
              t: e.parentNode
            }))
          }
        })(l.join("Þ").trim());
        for (let e = 0, t = d.length; e < t; ++e) {
          const t = _[e];
          if (Array.isArray(t)) {
            d[e].e.nodeValue = "";
            const r = document.createDocumentFragment();
            for (let e = 0, n = t.length; e < n;) r.appendChild(t[e++]);
            d[e].t.appendChild(r)
          } else o(d[e], t)
        }
        return f.uuid = "_" + Math.random().toString(36).substr(2, 9), f.firstChild.uuid = f.uuid, s = d, c = _, f
      }
      for (let e = 0, t = _.length; e < t; ++e) {
        const t = _[e];
        c[e] != t && (o(s[e], t), c[e] = t)
      }
    }
  })
})();