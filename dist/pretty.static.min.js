(() => {
  const a = /([\w-]+)|['"]{1}([^'"]*)['"]{1}/g,
    b = /<(?:"[^"]*"['"]*|'[^']*'['"]*|[^'">])+>/g, // http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
    c = new Set(["br", "col", "hr", "img", "input", "link", "meta"]),
    d = "\xDE",
    e = document,
    f = e.createDocumentFragment.bind(e),
    g = e.createTextNode.bind(e),
    h = () => "_" + Math.random().toString(36).substr(2, 9),
    i = b => {
      let d, e = 0;
      const f = {
        name: "",
        voidElement: !1,
        attrs: {}
      };
      return b.replace(a, a => {
        e % 2 ? d = a : 0 == e ? ((c.has(a) || "/" === b[b.length - 2]) && (f.voidElement = !0), f.name = a) : f.attrs[d] = a.replace(/['"]/g, ""), ++e
      }), f
    },
    k = (a, b, c, e) => {
      const f = a.slice(b, a.indexOf("<", b)),
        h = f.split(d);
      0 < h[0].trim().length && c.appendChild(g(h[0]));
      for (let f = 1, i = h.length; f < i; ++f) {
        const a = g(d);
        c.appendChild(a), e.push(a), 0 < h[f].trim().length && c.appendChild(g(h[f]))
      }
    },
    l = a => {
      let c = -1;
      const d = [],
        g = [];
      a.replace(b, (b, f) => {
        const h = "/" !== b[1],
          l = f + b.length,
          m = a[l];
        let n;
        if (h) {
          c++;
          let f;
          ({
            name: f,
            voidElement: n
          } = i(b));
          const h = e.createElement(f),
            o = d[c - 1];
          !n && m && "<" !== m && k(a, l, h, g), o && o.append(h), d[c] = h
        }(!h || n) && (c--, "<" !== m && m && k(a, l, d[c], g))
      });
      const h = f();
      return h.appendChild(d[0]), {
        frag: h,
        slots: g.map(a => ({
          node: a,
          parent: a.parentNode
        }))
      }
    },
    m = (a, b) => { // nodeType 11 == Node.DOCUMENT_FRAGMENT_NODE.
      if (b && 11 == b.nodeType) a.node.parentNode.replaceChild(b, a.node);
      else if (Array.isArray(b)) {
        const {
          parent: c
        } = a, {
          childNodes: d
        } = c;
        for (let a = j = 0; a < d.length && j < b.length;) {
          const f = d[a].uuid;
          f ? f == b[j].uuid ? (a++, j++) : b.some(a => a.uuid == f) ? c.insertBefore(b[j++], c.childNodes[a++]) : c.removeChild(c.childNodes[a]) : a++
        }
        for (; j < b.length;) c.appendChild(b[j++])
      } else a.node.nodeValue = b
    },
    n = {
      $component: () => {
        let a, b;
        return (c, ...e) => {
          if (!a) {
            const {
              frag: g,
              slots: k
            } = l(c.join(d).trim());
            for (let a = 0, b = k.length; a < b; ++a) {
              const b = e[a];
              if (Array.isArray(b)) {
                k[a].node.nodeValue = "";
                const c = f();
                for (let a = 0, d = b.length; a < d;) c.appendChild(b[a++]);
                k[a].parent.appendChild(c)
              } else m(k[a], b)
            }
            return g.uuid = h(), g.firstChild.uuid = g.uuid, a = k, b = e, g
          } // Updated DIFFed nodes.
          for (let d = 0, f = e.length; d < f; ++d) {
            const c = e[d];
            b[d] != c && (m(a[d], c), b[d] = c)
          }
        }
      }
    };
  window.StaticJs = n, module && (module.exports = n)
})();