(() => {
  const e = /([\w-]+)|['"]{1}([^'"]*)['"]{1}/g,
    t = /<(?:"[^"]*"['"]*|'[^']*'['"]*|[^'">])+>/g,
    r = new Set(["br", "col", "hr", "img", "input", "link", "meta"]),
    o = (e, t, r, o, n = e.slice(t, e.indexOf("<", t)), s = n.split("Þ")) => {
      s[0].trim().length > 0 && r.appendChild(document.createTextNode(s[0]));
      for (let e = 1, t = s.length; e < t; ++e) {
        const t = document.createTextNode("Þ");
        r.appendChild(t), o.push(t), s[e].trim().length > 0 && r.appendChild(document.createTextNode(s[e]))
      }
    },
    n = (e, t) => {
      if (t && 11 == t.nodeType) e.e.parentNode.replaceChild(t, e.e);
      else if (Array.isArray(t)) {
        const {
          t: r
        } = e, {
          childNodes: o
        } = r;
        for (let e = j = 0; e < o.length && j < t.length;) {
          const n = o[e].r;
          n ? n == t[j].r ? (e++, j++) : t.some(e => e.r == n) ? r.insertBefore(t[j++], r.childNodes[e++]) : r.removeChild(r.childNodes[e]) : e++
        }
        for (; j < t.length;) r.appendChild(t[j++])
      } else e.e.nodeValue = t
    };
  StaticJS = ((s, c) => (l, ..._) => {
    if (!s) {
      const {
        o: a,
        n: f
      } = ((n, s = -1, c = [], l = []) => {
        n.replace(t, (t, _) => {
          const a = "/" !== t[1],
            f = _ + t.length,
            i = n[f];
          let m;
          if (a) {
            let _;
            s++, ({
              name: _,
              voidElement: m
            } = ((t, o = 0, n, s = {
              name: "",
              voidElement: !1,
              attrs: {}
            }) => (t.replace(e, e => {
              o % 2 ? n = e : 0 === o ? ((r.has(e) || "/" === t[t.length - 2]) && (s.voidElement = !0), s.name = e) : s.attrs[n] = e.replace(/['"]/g, ""), ++o
            }), s))(t));
            const a = document.createElement(_),
              d = c[s - 1];
            !m && i && "<" !== i && o(n, f, a, l), d && d.append(a), c[s] = a
          }
          a && !m || (s--, "<" !== i && i && o(n, f, c[s], l))
        });
        const _ = document.createDocumentFragment();
        return _.appendChild(c[0]), {
          o: _,
          n: l.map(e => ({
            e: e,
            t: e.parentNode
          }))
        }
      })(l.join("Þ").trim());
      for (let e = 0, t = f.length; e < t; ++e) {
        const t = _[e];
        if (Array.isArray(t)) {
          f[e].e.nodeValue = "";
          const r = document.createDocumentFragment();
          for (let e = 0, o = t.length; e < o;) r.appendChild(t[e++]);
          f[e].t.appendChild(r)
        } else n(f[e], t)
      }
      return a.firstChild.r = a.r = Date.now() + Math.random(), s = f, c = _, a
    }
    for (let e = 0, t = _.length; e < t; ++e) {
      const t = _[e];
      c[e] != t && (n(s[e], t), c[e] = t)
    }
  })
})();