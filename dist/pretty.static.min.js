(() => {
  const t = /([\w-]+)|['"]{1}([^'"]*)['"]{1}/g,
    e = /<(?:"[^"]*"['"]*|'[^']*'['"]*|[^'">])+>/g,
    r = ["br", "col", "hr", "img", "input", "link", "meta"],
    o = (t, e) => {
      if (e && 11 == e.nodeType) t.t.parentNode.replaceChild(e, t.t);
      else if (Array.isArray(e)) {
        const {
          e: r
        } = t, {
          childNodes: o
        } = r, n = e.length;
        for (let t = j = 0; t < o.length && j < n;) {
          const n = o[t].r;
          n ? n == e[j].r ? (t++, j++) : e.some(t => t.r == n) ? r.insertBefore(e[j++], o[t++]) : r.removeChild(o[t]) : t++
        }
        for (; j < n;) r.appendChild(e[j++])
      } else t.t.nodeValue = e
    };
  StaticJS = (() => {
    let n, c;
    return (s, ...l) => {
      if (!n) {
        const f = ((o, n, c = -1, s = [], l = document.createDocumentFragment()) => (o.replace(e, (e, l) => {
          const f = "/" !== e[1],
            i = l + e.length,
            a = o[i],
            d = t => a && "<" !== a && ((t, e, r, o, n = t.slice(e, t.indexOf("<", e)), c = n.split("Þ"), s = (t => c[t].trim().length > 0 && r.appendChild(document.createTextNode(c[t])))) => {
              s(0);
              for (let t = 1, e = c.length; t < e; ++t) {
                const e = r.appendChild(document.createTextNode("Þ"));
                o.push({
                  t: e,
                  e: e.parentNode
                }), s(t)
              }
            })(o, i, t, n),
            m = {
              o: ""
            };
          if (f) {
            c++, ((e, o, n = 0, c) => {
              e.replace(t, t => {
                n % 2 ? c = t : n ? o.n[c] = t.replace(/['"]/g, "") : ((r.includes(t) || "/" === e[e.length - 2]) && (o.c = !0), o.o = t), ++n
              })
            })(e, m);
            const o = document.createElement(m.o),
              n = s[c - 1];
            d(o), n && n.append(o), s[c] = o
          }
          f && !m.c || d(s[--c])
        }), l.appendChild(s[0]), l))(s.join("Þ").trim(), n = []);
        for (let t = 0, e = n.length; t < e; ++t) {
          const e = l[t];
          if (Array.isArray(e)) {
            n[t].t.nodeValue = "";
            const r = document.createDocumentFragment();
            for (let t = 0, o = e.length; t < o;) r.appendChild(e[t++]);
            n[t].e.appendChild(r)
          } else o(n[t], e)
        }
        return f.firstChild.r = f.r = Date.now() + Math.random(), c = l, f
      }
      for (let t = 0, e = l.length; t < e; ++t) {
        const e = l[t];
        c[t] != e && (o(n[t], e), c[t] = e)
      }
    }
  })
})();