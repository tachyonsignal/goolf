(() => {
  const e = /([\w-]+)|['"]{1}([^'"]*)['"]{1}/g,
    t = /<(?:"[^"]*"['"]*|'[^']*'['"]*|[^'">])+>/g,
    r = new Set(["br", "col", "hr", "img", "input", "link", "meta"]),
    s = (e, t, r, s, n = e.slice(t, e.indexOf("<", t)), o = n.split("Þ")) => {
      o[0].trim().length > 0 && r.appendChild(document.createTextNode(o[0]));
      for (let e = 1, t = o.length; e < t; ++e) {
        const t = document.createTextNode("Þ");
        r.appendChild(t), s.push(t), o[e].trim().length > 0 && r.appendChild(document.createTextNode(o[e]))
      }
    },
    n = (e, t) => {
      if (t && 11 == t.nodeType) e.e.parentNode.replaceChild(t, e.e);
      else if (Array.isArray(t)) {
        const {
          t: r
        } = e, {
          childNodes: s
        } = r;
        for (let e = j = 0; e < s.length && j < t.length;) {
          const n = s[e].r;
          n ? n == t[j].r ? (e++, j++) : t.some(e => e.r == n) ? r.insertBefore(t[j++], r.childNodes[e++]) : r.removeChild(r.childNodes[e]) : e++
        }
        for (; j < t.length;) r.appendChild(t[j++])
      } else e.e.nodeValue = t
    };
  StaticJS = (() => {
    let o, _;
    return (c, ...l) => {
      if (!o) {
        const {
          s: a,
          n: f
        } = ((n, o = -1, _ = [], c = []) => {
          n.replace(t, (t, l) => {
            const a = "/" !== t[1],
              f = l + t.length,
              i = n[f];
            let m;
            if (a) {
              let l;
              o++, ({
                o: l,
                _: m
              } = ((t, s = 0, n, o = {
                o: "",
                _: !1,
                c: {}
              }) => (t.replace(e, e => {
                s % 2 ? n = e : 0 === s ? ((r.has(e) || "/" === t[t.length - 2]) && (o._ = !0), o.o = e) : o.c[n] = e.replace(/['"]/g, ""), ++s
              }), o))(t));
              const a = document.createElement(l),
                d = _[o - 1];
              !m && i && "<" !== i && s(n, f, a, c), d && d.append(a), _[o] = a
            }
            a && !m || (o--, "<" !== i && i && s(n, f, _[o], c))
          });
          const l = document.createDocumentFragment();
          return l.appendChild(_[0]), {
            s: l,
            n: c.map(e => ({
              e: e,
              t: e.parentNode
            }))
          }
        })(c.join("Þ").trim());
        for (let e = 0, t = f.length; e < t; ++e) {
          const t = l[e];
          if (Array.isArray(t)) {
            f[e].e.nodeValue = "";
            const r = document.createDocumentFragment();
            for (let e = 0, s = t.length; e < s;) r.appendChild(t[e++]);
            f[e].t.appendChild(r)
          } else n(f[e], t)
        }
        return a.firstChild.r = a.r = Date.now() + Math.random(), o = f, _ = l, a
      }
      for (let e = 0, t = l.length; e < t; ++e) {
        const t = l[e];
        _[e] != t && (n(o[e], t), _[e] = t)
      }
    }
  })
})();