(() => {
  const e = /([\w-]+)|['"]{1}([^'"]*)['"]{1}/g,
    t = /<(?:"[^"]*"['"]*|'[^']*'['"]*|[^'">])+>/g,
    r = ["br", "col", "hr", "img", "input", "link", "meta"],
    n = (e, t) => {
      if (t && 11 == t.nodeType) e.e.parentNode.replaceChild(t, e.e);
      else if (Array.isArray(t)) {
        const {
          t: r
        } = e, {
          childNodes: n
        } = r, o = t.length;
        for (let e = j = 0; e < n.length && j < o;) {
          const o = n[e].r;
          o ? o == t[j].r ? (e++, j++) : t.some(e => e.r == o) ? r.insertBefore(t[j++], n[e++]) : r.removeChild(n[e]) : e++
        }
        for (; j < o;) r.appendChild(t[j++])
      } else e.e.nodeValue = t
    };
  StaticJS = (() => {
    let o, s;
    return (c, ...l) => {
      if (!o) {
        o = [];
        const _ = ((n, o, s = -1, c = []) => {
          n.replace(t, (t, l) => {
            const _ = "/" !== t[1],
              i = l + t.length,
              a = n[i],
              f = e => a && "<" !== a && ((e, t, r, n, o = e.slice(t, e.indexOf("<", t)), s = o.split("Þ"), c = (e => s[e].trim().length > 0 && r.appendChild(document.createTextNode(s[e])))) => {
                c(0);
                for (let e = 1, t = s.length; e < t; ++e) {
                  const t = document.createTextNode("Þ");
                  r.appendChild(t), n.push({
                    e: t,
                    t: t.parentNode
                  }), c(e)
                }
              })(n, i, e, o);
            let m;
            if (_) {
              let n;
              s++, ({
                n: n,
                o: m
              } = ((t, n = 0, o, s = {
                n: "",
                o: !1,
                s: {}
              }) => (t.replace(e, e => {
                n % 2 ? o = e : 0 === n ? ((r.includes(e) || "/" === t[t.length - 2]) && (s.o = !0), s.n = e) : s.s[o] = e.replace(/['"]/g, ""), ++n
              }), s))(t));
              const o = document.createElement(n),
                l = c[s - 1];
              f(o), l && l.append(o), c[s] = o
            }
            _ && !m || f(c[--s])
          });
          const l = document.createDocumentFragment();
          return l.appendChild(c[0]), l
        })(c.join("Þ").trim(), o);
        for (let e = 0, t = o.length; e < t; ++e) {
          const t = l[e];
          if (Array.isArray(t)) {
            o[e].e.nodeValue = "";
            const r = document.createDocumentFragment();
            for (let e = 0, n = t.length; e < n;) r.appendChild(t[e++]);
            o[e].t.appendChild(r)
          } else n(o[e], t)
        }
        return _.firstChild.r = _.r = Date.now() + Math.random(), s = l, _
      }
      for (let e = 0, t = l.length; e < t; ++e) {
        const t = l[e];
        s[e] != t && (n(o[e], t), s[e] = t)
      }
    }
  })
})();