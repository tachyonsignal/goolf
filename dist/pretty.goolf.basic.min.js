(() => {
  const t = /([\w-]+)|['"]{1}([^'"]*)['"]{1}/g,
    e = /<(?:"[^"]*"['"]*|'[^']*'['"]*|[^'">])+>/g,
    n = ["br", "col", "hr", "img", "input", "link", "meta"],
    o = (t, e) => {
      e && 11 == e.nodeType ? t.t.parentNode.replaceChild(e, t.t) : t.t.nodeValue = e
    };
  Goolf = (() => {
    let r, c;
    return (s, ...l) => {
      if (!r) {
        const m = ((o, r, c = -1, s = [], l = document.createDocumentFragment()) => (o.replace(e, (e, l) => {
          const m = "/" !== e[1],
            u = l + e.length,
            f = o[u],
            _ = t => f && "<" !== f && ((t, e, n, o, r = t.slice(e, t.indexOf("<", e)), c = r.split("Þ"), s = (t => c[t].trim().length > 0 && n.appendChild(document.createTextNode(c[t])))) => {
              s(0);
              for (let t = 1, e = c.length; t < e; ++t) {
                const e = n.appendChild(document.createTextNode("Þ"));
                o.push({
                  t: e,
                  e: e.parentNode
                }), s(t)
              }
            })(o, u, t, r),
            d = {
              n: ""
            };
          if (m) {
            c++, ((e, o, r = 0, c) => {
              e.replace(t, t => {
                r || ((n.includes(t) || "/" === e[e.length - 2]) && (o.o = !0), o.n = t)
              })
            })(e, d);
            const o = document.createElement(d.n),
              r = s[c - 1];
            _(o), r && r.append(o), s[c] = o
          }
          m && !d.o || _(s[--c])
        }), l.appendChild(s[0]), l))(s.join("Þ").trim(), r = []);
        for (let t = 0, e = r.length; t < e; ++t) o(r[t], l[t]);
        return c = l, m
      }
      for (let t = 0, e = l.length; t < e; ++t) {
        const e = l[t];
        c[t] != e && (o(r[t], e), c[t] = e)
      }
    }
  })
})();